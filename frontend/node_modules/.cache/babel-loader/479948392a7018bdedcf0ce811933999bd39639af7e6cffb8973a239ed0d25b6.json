{"ast":null,"code":"var _jsxFileName = \"/Users/ioanaghita/gi_software/frontend/src/context/TranslationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\n * Translation Provider Component for GI Software frontend\n * \n * This component provides a context for translation functionality\n * It should be placed in the frontend/src/context directory\n */\n\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport translations from '../utils/translations';\n\n// Create translation context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranslationContext = /*#__PURE__*/createContext();\n\n// Translation provider component\nexport const TranslationProvider = ({\n  children\n}) => {\n  _s();\n  // Get initial language from localStorage or default to English\n  const [language, setLanguage] = useState(() => {\n    return localStorage.getItem('language') || 'en';\n  });\n\n  // Update HTML lang attribute and localStorage when language changes\n  useEffect(() => {\n    document.documentElement.lang = language;\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  // Toggle between English and Romanian\n  const toggleLanguage = () => {\n    setLanguage(prevLang => prevLang === 'en' ? 'ro' : 'en');\n  };\n\n  // Translate function to get string by key\n  const translate = key => {\n    // Get translations for current language or default to English\n    const currentTranslations = translations[language] || translations.en;\n\n    // Return translation or fallback to English or key itself\n    return currentTranslations[key] || translations.en[key] || key;\n  };\n\n  // Context value\n  const contextValue = {\n    language,\n    setLanguage,\n    toggleLanguage,\n    t: translate,\n    isEnglish: language === 'en',\n    isRomanian: language === 'ro'\n  };\n  return /*#__PURE__*/_jsxDEV(TranslationContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook for using translation context\n_s(TranslationProvider, \"wpzIqvMkuDeifM9taZET8Gy/e74=\");\n_c = TranslationProvider;\nexport const useTranslation = () => {\n  _s2();\n  const context = useContext(TranslationContext);\n  if (!context) {\n    throw new Error('useTranslation must be used within a TranslationProvider');\n  }\n  return context;\n};\n_s2(useTranslation, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default TranslationProvider;\nvar _c;\n$RefreshReg$(_c, \"TranslationProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","translations","jsxDEV","_jsxDEV","TranslationContext","TranslationProvider","children","_s","language","setLanguage","localStorage","getItem","document","documentElement","lang","setItem","toggleLanguage","prevLang","translate","key","currentTranslations","en","contextValue","t","isEnglish","isRomanian","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTranslation","_s2","context","Error","$RefreshReg$"],"sources":["/Users/ioanaghita/gi_software/frontend/src/context/TranslationProvider.js"],"sourcesContent":["/**\n * Translation Provider Component for GI Software frontend\n * \n * This component provides a context for translation functionality\n * It should be placed in the frontend/src/context directory\n */\n\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport translations from '../utils/translations';\n\n// Create translation context\nconst TranslationContext = createContext();\n\n// Translation provider component\nexport const TranslationProvider = ({ children }) => {\n  // Get initial language from localStorage or default to English\n  const [language, setLanguage] = useState(() => {\n    return localStorage.getItem('language') || 'en';\n  });\n\n  // Update HTML lang attribute and localStorage when language changes\n  useEffect(() => {\n    document.documentElement.lang = language;\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  // Toggle between English and Romanian\n  const toggleLanguage = () => {\n    setLanguage(prevLang => prevLang === 'en' ? 'ro' : 'en');\n  };\n\n  // Translate function to get string by key\n  const translate = (key) => {\n    // Get translations for current language or default to English\n    const currentTranslations = translations[language] || translations.en;\n    \n    // Return translation or fallback to English or key itself\n    return currentTranslations[key] || translations.en[key] || key;\n  };\n\n  // Context value\n  const contextValue = {\n    language,\n    setLanguage,\n    toggleLanguage,\n    t: translate,\n    isEnglish: language === 'en',\n    isRomanian: language === 'ro',\n  };\n\n  return (\n    <TranslationContext.Provider value={contextValue}>\n      {children}\n    </TranslationContext.Provider>\n  );\n};\n\n// Hook for using translation context\nexport const useTranslation = () => {\n  const context = useContext(TranslationContext);\n  \n  if (!context) {\n    throw new Error('useTranslation must be used within a TranslationProvider');\n  }\n  \n  return context;\n};\n\nexport default TranslationProvider;"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,YAAY,MAAM,uBAAuB;;AAEhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,gBAAGP,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMQ,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,MAAM;IAC7C,OAAOY,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI;EACjD,CAAC,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACdY,QAAQ,CAACC,eAAe,CAACC,IAAI,GAAGN,QAAQ;IACxCE,YAAY,CAACK,OAAO,CAAC,UAAU,EAAEP,QAAQ,CAAC;EAC5C,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IAC3BP,WAAW,CAACQ,QAAQ,IAAIA,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;EAC1D,CAAC;;EAED;EACA,MAAMC,SAAS,GAAIC,GAAG,IAAK;IACzB;IACA,MAAMC,mBAAmB,GAAGnB,YAAY,CAACO,QAAQ,CAAC,IAAIP,YAAY,CAACoB,EAAE;;IAErE;IACA,OAAOD,mBAAmB,CAACD,GAAG,CAAC,IAAIlB,YAAY,CAACoB,EAAE,CAACF,GAAG,CAAC,IAAIA,GAAG;EAChE,CAAC;;EAED;EACA,MAAMG,YAAY,GAAG;IACnBd,QAAQ;IACRC,WAAW;IACXO,cAAc;IACdO,CAAC,EAAEL,SAAS;IACZM,SAAS,EAAEhB,QAAQ,KAAK,IAAI;IAC5BiB,UAAU,EAAEjB,QAAQ,KAAK;EAC3B,CAAC;EAED,oBACEL,OAAA,CAACC,kBAAkB,CAACsB,QAAQ;IAACC,KAAK,EAAEL,YAAa;IAAAhB,QAAA,EAC9CA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC,CAAC;;AAED;AAAAxB,EAAA,CA3CaF,mBAAmB;AAAA2B,EAAA,GAAnB3B,mBAAmB;AA4ChC,OAAO,MAAM4B,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,MAAMC,OAAO,GAAGpC,UAAU,CAACK,kBAAkB,CAAC;EAE9C,IAAI,CAAC+B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,cAAc;AAU3B,eAAe5B,mBAAmB;AAAC,IAAA2B,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}