{"ast":null,"code":"var _jsxFileName = \"/Users/ioanaghita/gi_software/frontend/src/components/language_switcher.js\",\n  _s = $RefreshSig$();\n/**\n * Language Switcher Component for GI Software frontend\n * \n * This component provides a toggle between English and Romanian languages.\n * It should be placed in the frontend/src/components directory.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport './language-switcher.css'; // Create this CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageSwitcher = () => {\n  _s();\n  // Get initial language from localStorage or default to English\n  const [language, setLanguage] = useState(() => {\n    return localStorage.getItem('language') || 'en';\n  });\n\n  // Update HTML lang attribute when language changes\n  useEffect(() => {\n    document.documentElement.lang = language;\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  // Toggle between English and Romanian\n  const toggleLanguage = () => {\n    const newLang = language === 'en' ? 'ro' : 'en';\n    setLanguage(newLang);\n\n    // Reload the page to apply language change\n    // In a more advanced implementation, you might use a context provider\n    // instead of reloading the page\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"language-switcher\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleLanguage,\n      className: \"language-toggle-btn\",\n      \"aria-label\": `Switch to ${language === 'en' ? 'Romanian' : 'English'}`,\n      children: language === 'en' ? 'RO' : 'EN'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageSwitcher, \"wpzIqvMkuDeifM9taZET8Gy/e74=\");\n_c = LanguageSwitcher;\nexport default LanguageSwitcher;\nvar _c;\n$RefreshReg$(_c, \"LanguageSwitcher\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LanguageSwitcher","_s","language","setLanguage","localStorage","getItem","document","documentElement","lang","setItem","toggleLanguage","newLang","window","location","reload","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ioanaghita/gi_software/frontend/src/components/language_switcher.js"],"sourcesContent":["/**\n * Language Switcher Component for GI Software frontend\n * \n * This component provides a toggle between English and Romanian languages.\n * It should be placed in the frontend/src/components directory.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport './language-switcher.css'; // Create this CSS file for styling\n\nconst LanguageSwitcher = () => {\n  // Get initial language from localStorage or default to English\n  const [language, setLanguage] = useState(() => {\n    return localStorage.getItem('language') || 'en';\n  });\n\n  // Update HTML lang attribute when language changes\n  useEffect(() => {\n    document.documentElement.lang = language;\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  // Toggle between English and Romanian\n  const toggleLanguage = () => {\n    const newLang = language === 'en' ? 'ro' : 'en';\n    setLanguage(newLang);\n    \n    // Reload the page to apply language change\n    // In a more advanced implementation, you might use a context provider\n    // instead of reloading the page\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"language-switcher\">\n      <button \n        onClick={toggleLanguage}\n        className=\"language-toggle-btn\"\n        aria-label={`Switch to ${language === 'en' ? 'Romanian' : 'English'}`}\n      >\n        {language === 'en' ? 'RO' : 'EN'}\n      </button>\n    </div>\n  );\n};\n\nexport default LanguageSwitcher;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,yBAAyB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,MAAM;IAC7C,OAAOQ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI;EACjD,CAAC,CAAC;;EAEF;EACAR,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACC,eAAe,CAACC,IAAI,GAAGN,QAAQ;IACxCE,YAAY,CAACK,OAAO,CAAC,UAAU,EAAEP,QAAQ,CAAC;EAC5C,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,OAAO,GAAGT,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI;IAC/CC,WAAW,CAACQ,OAAO,CAAC;;IAEpB;IACA;IACA;IACAC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC1B,CAAC;EAED,oBACEf,OAAA;IAAKgB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,eAChCjB,OAAA;MACEkB,OAAO,EAAEP,cAAe;MACxBK,SAAS,EAAC,qBAAqB;MAC/B,cAAY,aAAab,QAAQ,KAAK,IAAI,GAAG,UAAU,GAAG,SAAS,EAAG;MAAAc,QAAA,EAErEd,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG;IAAI;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACpB,EAAA,CAlCID,gBAAgB;AAAAsB,EAAA,GAAhBtB,gBAAgB;AAoCtB,eAAeA,gBAAgB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}